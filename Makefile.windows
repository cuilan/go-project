# Copyright The Authors.
# Windows-specific Makefile for Go Project

# Windows 平台特定的图标和标识
WHALE   = "[BUILD]"
RUN     = "[RUN]"
OK      = "[OK]"
INFO    = "[INFO]"
WARNING = "[WARN]"
ERROR   = "[ERROR]"
DIST    = "[PKG]"

# ====================================================================================
# Windows
# Installation path, not recommended to modify
# ====================================================================================

PREFIX        ?= C:/Program Files/$(APP_NAME)
BINDIR        ?= $(PREFIX)/bin
DATADIR       ?= $(PREFIX)/share
DOCDIR        ?= $(DATADIR)/doc
MANDIR        ?= $(DATADIR)/man

CLEAN_CMD = rmdir /s /q

# Main package file
MAIN_FILE := $(MAIN_PACKAGE)/main_windows.go

# ====================================================================================
# Common functions
# ====================================================================================

# Check if file exists
define check_file_exists
	@if not exist "$(1)" ( \
		echo "$(ERROR)  File $(1) not found." && \
		exit /b 1 \
	)
endef

# Create directory
define create_dir
	@if not exist "$(1)" mkdir "$(1)"
endef

# Clean directory
define clean_dir
	@if exist "$(1)" rmdir /s /q "$(1)"
endef

# Check if directory exists
define check_dir_exists
	@if not exist "$(1)" ( \
		echo "$(ERROR)  Directory $(1) not found." && \
		exit /b 1 \
	)
endef

# Copy file with error handling
define copy_file
	@if exist "$(1)" ( \
		copy "$(1)" "$(2)" >nul && \
		echo "$(OK)  Copied $(1) to $(2)" \
	) else ( \
		echo "$(ERROR)  Source file $(1) not found." && \
		exit /b 1 \
	)
endef

# Copy directory recursively
define copy_dir
	@if exist "$(1)" ( \
		xcopy "$(1)" "$(2)" /e /i /q >nul && \
		echo "$(OK)  Copied directory $(1) to $(2)" \
	) else ( \
		echo "$(ERROR)  Source directory $(1) not found." && \
		exit /b 1 \
	)
endef

# Check if command exists
define check_command_exists
	@where $(1) >nul 2>&1 || ( \
		echo "$(ERROR)  Command $(1) not found in PATH." && \
		exit /b 1 \
	)
endef

# Get file size in bytes
define get_file_size
	@for %%A in ("$(1)") do echo %%~zA
endef

# Check if service exists
define check_service_exists
	@sc query "$(1)" >nul 2>&1 || ( \
		echo "$(WARNING)  Service $(1) not found." && \
		exit /b 1 \
	)
endef

# Check if service is running
define check_service_running
	@sc query "$(1)" | find "RUNNING" >nul 2>&1 || ( \
		echo "$(WARNING)  Service $(1) is not running." && \
		exit /b 1 \
	)
endef

# ====================================================================================
# Windows 特定配置
# ====================================================================================

# Windows 服务相关配置
SERVICE_NAME := $(APP_NAME)
SERVICE_DISPLAY_NAME := "Your Go Project Service"
SERVICE_DESCRIPTION := "Go Project Service for Windows"

# 默认编译平台（Windows 64位）
PLATFORMS := $(WINDOWS_AMD64)

# ====================================================================================

.PHONY: dist run-bin clean install-service uninstall-service start-service stop-service restart-service

# ====================================================================================
# 核心构建与分发
# ====================================================================================

dist: build-all ## 构建并打包成 Windows ZIP 可分发文件
	@echo "$(WHALE) $@"
	@echo "$(RUN)  Creating Windows distribution packages..."
	@if not exist dist mkdir dist
	@for %%p in ($(PLATFORMS)) do ( \
		for /f "tokens=1,2 delims=/" %%a in ("%%p") do ( \
			set GOOS=%%a && \
			set GOARCH=%%b && \
			set VERSIONED_APP_NAME=$(APP_NAME)_$(GIT_VERSION)_$(GIT_COMMIT)_%%a_%%b.exe && \
			set ZIP_NAME=$(APP_NAME)_$(GIT_VERSION)_$(GIT_COMMIT)_%%a_%%b.zip && \
			echo   [PKG] Packaging %%p... && \
			if exist dist\staging rmdir /s /q dist\staging && \
			mkdir dist\staging\release && \
			copy bin\%%VERSIONED_APP_NAME%% dist\staging\release\$(APP_NAME).exe && \
			xcopy configs dist\staging\release\configs /e /i /q && \
			xcopy init dist\staging\release\init /e /i /q && \
			cd dist\staging && \
			powershell -command "Compress-Archive -Path release -DestinationPath ..\%%ZIP_NAME%%" && \
			cd ..\.. && \
			rmdir /s /q dist\staging \
		) \
	)
	@echo "$(OK)  Windows ZIP distribution packages created successfully in dist/ directory."

# ====================================================================================
# Windows 服务管理
# ====================================================================================

install-service: build ## 安装 Windows 服务
	@echo "$(WHALE) $@"
	@echo "$(RUN)  Installing Windows service..."
	@if not exist bin\$(APP_NAME)*.exe ( \
		echo "$(ERROR)  Executable not found. Please run 'make build' first." && \
		exit 1 \
	)
	@sc create "$(SERVICE_NAME)" binPath= "%~dp0bin\$(APP_NAME)*.exe --config-dir %~dp0configs" DisplayName= "$(SERVICE_DISPLAY_NAME)" start= auto
	@sc description "$(SERVICE_NAME)" "$(SERVICE_DESCRIPTION)"
	@echo "$(OK)  Windows service installed successfully."

uninstall-service: ## 卸载 Windows 服务
	@echo "$(WHALE) $@"
	@echo "$(RUN)  Uninstalling Windows service..."
	@sc stop "$(SERVICE_NAME)" 2>nul || echo "Service not running"
	@sc delete "$(SERVICE_NAME)" 2>nul || echo "Service not found"
	@echo "$(OK)  Windows service uninstalled successfully."

start-service: ## 启动 Windows 服务
	@echo "$(WHALE) $@"
	@echo "$(RUN)  Starting Windows service..."
	@sc start "$(SERVICE_NAME)"
	@echo "$(OK)  Windows service started successfully."

stop-service: ## 停止 Windows 服务
	@echo "$(WHALE) $@"
	@echo "$(RUN)  Stopping Windows service..."
	@sc stop "$(SERVICE_NAME)"
	@echo "$(OK)  Windows service stopped successfully."

restart-service: stop-service start-service ## 重启 Windows 服务
