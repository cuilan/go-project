name: Docker Publish CI

on:
  push:
    branches: [ "main" ]
  # 允许您从 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        # 设置 QEMU 以支持多架构镜像构建
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # 设置 Buildx，这是 Docker 的下一代构建引擎
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # 登录到 Docker Hub，需要您在仓库的 Secrets 中配置 DOCKERHUB_USERNAME 和 DOCKERHUB_TOKEN
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push builder image
        id: build_builder
        run: |
          # 使用 awk 进行小写转换
          IMAGE_NAME=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')
          
          BUILDER_TAG="${IMAGE_NAME}:builder-${{ github.sha }}"
          echo "BUILDER_TAG=${BUILDER_TAG}" >> $GITHUB_OUTPUT
          docker buildx build \
            --platform linux/amd64 \
            --target builder \
            --tag "${BUILDER_TAG}" \
            --file build/Dockerfile \
            --push \
            .

      - name: Build and push application images
        run: |
          BUILDER_TAG=${{ steps.build_builder.outputs.BUILDER_TAG }}
          IMAGE_NAME=$(echo "${{ github.repository }}" | awk '{print tolower($0)}')

          # 遍历 'cmd' 目录下的所有子目录
          for app_dir in cmd/*; do
            if [ -d "$app_dir" ]; then
              # 从目录路径中提取应用名称
              APP_NAME=$(basename "$app_dir")
              
              # 构造完整的镜像标签，例如：your-github-username/go-project:client
              FULL_IMAGE_NAME="${IMAGE_NAME}:${APP_NAME}"

              echo "--------------------------------------------------"
              echo "Packaging and pushing image for: ${APP_NAME}"
              echo "Image Tag: ${FULL_IMAGE_NAME}"
              echo "--------------------------------------------------"

              docker buildx build \
                --platform linux/amd64 \
                --file build/Dockerfile \
                --build-arg BUILDER_IMAGE="${BUILDER_TAG}" \
                --build-arg APP_NAME="${APP_NAME}" \
                --tag "${FULL_IMAGE_NAME}" \
                --push \
                .
            fi
          done
